{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "InceptionPad Message Service",
  "Parameters": {
    "DeliveryStreamS3BucketName": {
      "Description": "Name of the bucket using to store Kinesis delivery stream.",
      "Type": "String",
      "Default": "dev-inceptionpad-message-service-deliverystream-bucket",
      "AllowedValues": [
        "dev-inceptionpad-message-service-deliverystream-bucket",
        "qa-inceptionpad-message-service-deliverystream-bucket",
        "prod-inceptionpad-message-service-deliverystream-bucket"
      ]
    },
    "DeliveryStreamS3Prefix": {
      "Description": "Name of the bucket using to store Kinesis delivery stream.",
      "Type": "String",
      "Default": "pinpoint-events/"
    },
    "PinpointEventProcessorLambdaName": {
      "Description": "Name of the pinpoint events processor Lambda.",
      "Type": "String",
      "Default": "dev-inceptionpad-message-service-pinpoint-event-processor",
      "AllowedValues": [
        "dev-inceptionpad-message-service-pinpoint-event-processor",
        "qa-inceptionpad-message-service-pinpoint-event-processor",
        "prod-inceptionpad-message-service-pinpoint-event-processor"
      ]
    }
  },
  "Resources": {
    "DeliveryStreamS3": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketName": {"Ref": "DeliveryStreamS3BucketName"},
        "NotificationConfiguration": {
          "LambdaConfigurations": [
            {
              "Event": "s3:ObjectCreated:*",
              "Filter": {
                "S3Key": {
                  "Rules": [
                    {
                      "Name": "prefix",
                      "Value": {"Ref": "DeliveryStreamS3Prefix"}
                    }
                  ]
                }
              },
              "Function": {"Fn::GetAtt": ["S3EventLambdaFunction", "Arn"]}
            }
          ]
        }
      },
      "DependsOn": ["S3InvokeLambdaPermission"]
    },
    "S3InvokeLambdaPermission": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": ["S3EventLambdaFunction", "Arn"]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "s3.amazonaws.com",
        "SourceAccount": {
          "Ref": "AWS::AccountId"
        },
        "SourceArn": {
          "Fn::Sub": "arn:aws:s3:::${DeliveryStreamS3BucketName}"
        }
      },
      "DependsOn": ["S3EventLambdaFunction"]
    },
    "S3EventLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": "lambda-functions-067174804713",
          "S3Key": "code-events-processor.zip"
        },
        "Description": "It processes the pinpoint events from the Kinesis Firehose.",
        "FunctionName": {"Ref": "PinpointEventProcessorLambdaName"},
        "Handler": "index.handler",
        "MemorySize": 128,
        "PackageType": "Zip",
        "ReservedConcurrentExecutions": 100,
        "Role": {"Fn::GetAtt": ["S3EventLambdaFunctionRole", "Arn"]},
        "Runtime": "nodejs22.x",
        "Timeout": 60
      },
      "DependsOn": ["S3EventLambdaFunctionRole"]
    },
    "S3EventLambdaFunctionRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {"Service": "lambda.amazonaws.com"},
              "Action": "sts:AssumeRole"
            }
          ]
        },
        "Description": "It has some logs/s3 permissions",
        "ManagedPolicyArns": ["arn:aws:iam::aws:policy/AWSLambdaExecute"]
      }
    }
  }
}
